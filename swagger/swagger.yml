swagger: "2.0"
info:
  title: beego Test API
  description: 配置路由地址
  version: 1.0.0
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /admin/login:
    post:
      tags:
      - admin
      description: admin login
      operationId: AdminController.AdminLogin
      parameters:
      - in: body
        name: body
        description: body for Admin content
        required: true
        schema:
          $ref: '#/definitions/models.Admin'
      responses:
        "200":
          description: ""
        "403":
          description: body is empty
    options:
      tags:
      - admin
      description: cros before admin login
      operationId: AdminController.BeforeAdminLogin
  /category/{id}:
    get:
      tags:
      - category
      description: get Category by id
      operationId: CategoryController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Category'
        "403":
          description: :id is empty
  /category/create:
    post:
      tags:
      - category
      description: create Category
      operationId: CategoryController.Create
      parameters:
      - in: body
        name: body
        description: body for Category content
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      responses:
        "201":
          description: '{int} models.Category'
        "403":
          description: body is empty
  /category/delete:
    post:
      tags:
      - category
      description: delete the Category
      operationId: CategoryController.Remove
      parameters:
      - in: body
        name: body
        description: body for Category content
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      responses:
        "201":
          description: '{int} models.Category'
        "403":
          description: body is empty
  /category/list:
    get:
      tags:
      - category
      description: get Category
      operationId: CategoryController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Category'
        "403":
          description: ""
  /category/update:
    post:
      tags:
      - category
      description: update the Category
      operationId: CategoryController.Update
      parameters:
      - in: body
        name: body
        description: body for Category content
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      responses:
        "201":
          description: '{int} models.Category'
        "403":
          description: body is empty
  /label/{id}:
    get:
      tags:
      - label
      description: get Label by id
      operationId: LabelController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Label'
        "403":
          description: :id is empty
  /label/create:
    post:
      tags:
      - label
      description: create Label
      operationId: LabelController.Create
      parameters:
      - in: body
        name: body
        description: body for Label content
        required: true
        schema:
          $ref: '#/definitions/models.Label'
      responses:
        "201":
          description: '{int} models.Label'
        "403":
          description: body is empty
  /label/delete:
    post:
      tags:
      - label
      description: delete the Label
      operationId: LabelController.Remove
      parameters:
      - in: body
        name: body
        description: body for Label content
        required: true
        schema:
          $ref: '#/definitions/models.Label'
      responses:
        "201":
          description: '{int} models.Label'
        "403":
          description: body is empty
  /label/list:
    get:
      tags:
      - label
      description: get Label
      operationId: LabelController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Label'
        "403":
          description: ""
  /label/update:
    post:
      tags:
      - label
      description: update the Label
      operationId: LabelController.Update
      parameters:
      - in: body
        name: body
        description: body for Label content
        required: true
        schema:
          $ref: '#/definitions/models.Label'
      responses:
        "201":
          description: '{int} models.Label'
        "403":
          description: body is empty
  /topic/{id}:
    get:
      tags:
      - topic
      description: get Topic by id
      operationId: TopicController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Topic'
        "403":
          description: :id is empty
  /topic/cate/{id}:
    get:
      tags:
      - topic
      description: get Topics by Category id
      operationId: TopicController.GetByCategory
      parameters:
      - in: path
        name: id
        description: category id
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.TopicsResult'
        "403":
          description: :id is empty
  /topic/create:
    post:
      tags:
      - topic
      description: create Topic
      operationId: TopicController.Login
      parameters:
      - in: body
        name: body
        description: body for Topic content
        required: true
        schema:
          $ref: '#/definitions/models.Topic'
      responses:
        "201":
          description: '{int} models.Topic'
        "403":
          description: body is empty
  /topic/delete:
    post:
      tags:
      - topic
      description: delete the Topic
      operationId: TopicController.Delete
      parameters:
      - in: body
        name: body
        description: body for Topic content
        required: true
        schema:
          $ref: '#/definitions/models.Topic'
      responses:
        "201":
          description: '{int} models.Topic'
        "403":
          description: body is empty
  /topic/find/{vname}:
    get:
      tags:
      - topic
      description: get Topics by Vague Name
      operationId: TopicController.GetByVagueName
      parameters:
      - in: path
        name: vname
        description: Vague Name
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.TopicsResult'
        "403":
          description: :vname is empty
  /topic/label/{id}:
    get:
      tags:
      - topic
      description: get Topics by Label id
      operationId: TopicController.GetByLabel
      parameters:
      - in: path
        name: id
        description: Label id
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.TopicsResult'
        "403":
          description: :id is empty
  /topic/list:
    get:
      tags:
      - topic
      description: get Topic
      operationId: TopicController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Topic'
        "403":
          description: ""
  /topic/update:
    post:
      tags:
      - topic
      description: update the Topic
      operationId: TopicController.Put
      parameters:
      - in: body
        name: body
        description: body for Topic content
        required: true
        schema:
          $ref: '#/definitions/models.Topic'
      responses:
        "201":
          description: '{int} models.Topic'
        "403":
          description: body is empty
definitions:
  models.Admin:
    title: Admin
    type: object
    properties:
      password:
        type: string
      username:
        type: string
  models.Category:
    title: Category
    type: object
    properties:
      desc:
        type: string
      id:
        type: integer
        format: int64
      name:
        type: string
  models.Label:
    title: Label
    type: object
    properties:
      desc:
        type: string
      id:
        type: integer
        format: int64
      name:
        type: string
  models.Topic:
    title: Topic
    type: object
    properties:
      Created:
        type: string
        format: datetime
      author:
        type: string
      cate:
        $ref: '#/definitions/models.Category'
      content:
        type: string
      id:
        type: integer
        format: int64
      labels:
        type: array
        items:
          $ref: '#/definitions/models.Label'
      reply_count:
        type: integer
        format: int64
      reply_last_user_id:
        type: integer
        format: int64
      summary:
        type: string
      title:
        type: string
      uid:
        type: integer
        format: int64
      url:
        type: string
      views:
        type: integer
        format: int64
  models.TopicsResult:
    title: TopicsResult
    type: object
    properties:
      code:
        type: integer
        format: int64
      msg:
        type: string
      topics:
        type: array
        items:
          $ref: '#/definitions/models.Topic'
tags:
- name: topic
  description: |
    TopicController operations for Topic
- name: category
  description: |
    CategoryController operations for Category
- name: label
  description: |
    LabelController operations for Label
